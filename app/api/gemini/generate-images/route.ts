import { GoogleGenerativeAI } from "@google/generative-ai"
import { type NextRequest, NextResponse } from "next/server"

const GEMINI_API_KEY = process.env.GEMINI_API_KEY || process.env.GOOGLE_GEN_AI_API_KEY

export async function POST(req: NextRequest) {
  if (!GEMINI_API_KEY) {
    return NextResponse.json({ error: "GEMINI_API_KEY is not set" }, { status: 500 })
  }

  try {
    const { prompt, modelId = "imagen-3.0-generate-002", numberOfImages = 1, aspectRatio = "1:1", style } = await req.json()

    if (!prompt) {
      return NextResponse.json({ error: "Prompt is required" }, { status: 400 })
    }

    console.log("Generating images with Imagen 3:", { modelId, prompt, numberOfImages, aspectRatio })

    // Use the new Google Gen AI SDK for Imagen 3
    const genAI = new GoogleGenerativeAI(GEMINI_API_KEY)

    // For Imagen 3, we need to use the generateImages method, not generateContent
    // First, let's construct the API call manually since the SDK might not have generateImages yet
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${modelId}:predict?key=${GEMINI_API_KEY}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        instances: [
          {
            prompt: prompt
          }
        ],
        parameters: {
          sampleCount: Math.min(Math.max(numberOfImages, 1), 4), // Clamp between 1 and 4
          aspectRatio: aspectRatio,
          ...(style && { style })
        }
      })
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error("Imagen 3 API error:", response.status, errorText)
      let errorMessage = `Imagen 3 API Error: ${response.status}`
      try {
        const errorData = JSON.parse(errorText)
        errorMessage = errorData.error?.message || errorMessage
      } catch (e) {
        errorMessage = `${errorMessage} - ${errorText}`
      }
      return NextResponse.json({ error: errorMessage }, { status: response.status })
    }

    const data = await response.json()

    if (!data.predictions || data.predictions.length === 0) {
      console.error("No predictions in Imagen 3 response:", data)
      return NextResponse.json({ error: "No images generated by Imagen 3 API" }, { status: 500 })
    }

    // Extract images from predictions - they should be base64 encoded
    const images = data.predictions
      .map((pred: any) => {
        // Check for different possible field names for the image data
        if (pred.bytesBase64Encoded) {
          return pred.bytesBase64Encoded
        }
        if (pred.image_bytes) {
          return pred.image_bytes
        }
        if (pred.generated_image) {
          return pred.generated_image
        }
        if (pred.image) {
          return pred.image
        }
        console.warn("Unexpected prediction format:", pred)
        return null
      })
      .filter((img: string | null) => img !== null) as string[]

    if (images.length === 0) {
      console.error("No valid image data found in predictions:", data.predictions)
      return NextResponse.json({ error: "No valid image data in Imagen 3 response" }, { status: 500 })
    }

    console.log(`Successfully generated ${images.length} images with Imagen 3`)

    return NextResponse.json({
      images,
      metadata: {
        prompt,
        aspectRatio,
        style,
        modelVersion: modelId,
        provider: "imagen-3",
        isPlaceholder: false,
      },
    })
  } catch (error: any) {
    console.error("Error in Imagen 3 generate-images API route:", error)
    const message = error instanceof Error ? error.message : "An unknown error occurred"
    return NextResponse.json({ error: message }, { status: 500 })
  }
}
