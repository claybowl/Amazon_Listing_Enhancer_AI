import { type NextRequest, NextResponse } from "next/server"

// Get API key from environment variables
const OPENAI_API_KEY = process.env.OPENAI_API_KEY

export async function HEAD(request: NextRequest) {
  // Simple HEAD request handler to check if the route exists
  return new NextResponse(null, { status: 200 })
}

export async function POST(request: NextRequest) {
  try {
    console.log("OpenAI generate-images API route called")

    // Check if API key is configured
    if (!OPENAI_API_KEY) {
      console.log("OpenAI API Key not configured on the server")
      return NextResponse.json({ error: "OpenAI API Key not configured on the server." }, { status: 500 })
    }

    // Parse request body
    let body
    try {
      body = await request.json()
    } catch (e) {
      console.error("Failed to parse request body:", e)
      return NextResponse.json({ error: "Invalid JSON in request body" }, { status: 400 })
    }

    const { prompt, numberOfImages = 1, modelId = "dall-e-3" } = body

    if (!prompt) {
      console.log("Missing required field: prompt")
      return NextResponse.json({ error: "Missing required field: prompt" }, { status: 400 })
    }

    if (numberOfImages < 1 || numberOfImages > 4) {
      console.log("Invalid number of images:", numberOfImages)
      return NextResponse.json({ error: "Number of images must be between 1 and 4." }, { status: 400 })
    }

    const fullPrompt = `**VERY IMPORTANT: Read all instructions carefully.**
You are an AI image generator tasked with creating a product image for an Amazon listing.

**Product to Depict (Primary Focus):**
The core task is to accurately render the product described in the "Product Context" below. The product's appearance, features, and details as described MUST be depicted as faithfully and identically as possible. Do NOT alter the product itself from how it is described.

**Product Context (This describes the product you must render accurately):**
---
${prompt}
---

**Image Style and Scene (Secondary - This is what you change around the product):**
While the product depiction MUST remain true to the "Product Context", the surrounding scene and environment SHOULD be changed to be:
- Highly appealing and fashionable.
- Professional and commercial quality, suitable for a premium Amazon listing.
- Well-lit, clear, and high-resolution.
- The goal is to present the *exact same product* (as per "Product Context") in a *new, enhanced, stylish setting* that makes it look highly desirable.

**Key Rule: Do not change the product's described features. Only change the scene, background, and styling around the product.**
Generate an image that makes this specific product look highly desirable in its new fashionable environment.`

    try {
      console.log("Calling OpenAI API for image generation using fetch")

      // Create an array to store promises for image generation
      const imagePromises = []

      // Create the specified number of images
      for (let i = 0; i < numberOfImages; i++) {
        const imagePromise = fetch("https://api.openai.com/v1/images/generations", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${OPENAI_API_KEY}`,
          },
          body: JSON.stringify({
            model: modelId,
            prompt: fullPrompt,
            n: 1,
            size: "1024x1024",
            response_format: "b64_json",
          }),
        }).then(async (response) => {
          if (!response.ok) {
            const errorData = await response.json()
            throw new Error(errorData.error?.message || "Failed to generate image")
          }
          return response.json()
        })

        imagePromises.push(imagePromise)
      }

      // Wait for all image generation to complete
      const results = await Promise.all(imagePromises)

      console.log("OpenAI image generation completed successfully")

      // Extract base64 images from results
      const images = results.flatMap((result) => result.data?.map((img: any) => img.b64_json) || []).filter(Boolean)

      if (images.length === 0) {
        console.error("No images generated by API")
        return NextResponse.json({ error: "No images generated by API." }, { status: 500 })
      }

      return NextResponse.json({
        images: images,
      })
    } catch (fetchError: any) {
      console.error("Error calling OpenAI API:", fetchError)
      console.error("Error details:", fetchError.message, fetchError.stack)

      // Check for specific error types
      if (fetchError.message?.includes("API key")) {
        return NextResponse.json({ error: "Invalid OpenAI API key" }, { status: 401 })
      }

      if (fetchError.message?.includes("rate limit")) {
        return NextResponse.json({ error: "OpenAI rate limit exceeded. Please try again later." }, { status: 429 })
      }

      return NextResponse.json(
        {
          error: `OpenAI API error: ${fetchError.message || "Unknown error from OpenAI API"}`,
        },
        { status: 500 },
      )
    }
  } catch (error: any) {
    console.error("Unexpected error in OpenAI generate-images API route:", error)
    console.error("Error stack:", error.stack)

    // Ensure we always return a JSON response
    return NextResponse.json(
      { error: `Server error: ${error.message || "An unknown error occurred"}` },
      { status: 500 },
    )
  }
}
