import { GoogleGenerativeAI } from "@google/generative-ai"
import { type NextRequest, NextResponse } from "next/server"

const GEMINI_API_KEY = process.env.GEMINI_API_KEY || process.env.GOOGLE_GEN_AI_API_KEY

export async function POST(req: NextRequest) {
  if (!GEMINI_API_KEY) {
    return NextResponse.json({ error: "GEMINI_API_KEY is not set" }, { status: 500 })
  }

  try {
    const { prompt, modelId = "gemini-2.0-flash-preview-image-generation", numberOfImages = 1 } = await req.json()

    if (!prompt) {
      return NextResponse.json({ error: "Prompt is required" }, { status: 400 })
    }

    console.log("Generating images with Gemini 2.0 Flash:", { modelId, prompt, numberOfImages })

    // Use the Gemini API with responseModalities for image generation
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${modelId}:generateContent?key=${GEMINI_API_KEY}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        contents: [{
          parts: [{ text: prompt }]
        }],
        generationConfig: {
          responseModalities: ["TEXT", "IMAGE"]
        }
      })
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error("Gemini 2.0 Flash API error:", response.status, errorText)
      let errorMessage = `Gemini 2.0 Flash API Error: ${response.status}`
      try {
        const errorData = JSON.parse(errorText)
        errorMessage = errorData.error?.message || errorMessage
      } catch (e) {
        errorMessage = `${errorMessage} - ${errorText}`
      }
      return NextResponse.json({ error: errorMessage }, { status: response.status })
    }

    const data = await response.json()

    if (!data.candidates || data.candidates.length === 0) {
      console.error("No candidates in Gemini 2.0 Flash response:", data)
      return NextResponse.json({ error: "No images generated by Gemini 2.0 Flash API" }, { status: 500 })
    }

    // Extract images from response parts
    const images: string[] = []
    let generatedText = ""

    for (const candidate of data.candidates) {
      if (candidate.content && candidate.content.parts) {
        for (const part of candidate.content.parts) {
          if (part.text) {
            generatedText += part.text + " "
          }
          if (part.inlineData && part.inlineData.data) {
            images.push(part.inlineData.data)
          }
        }
      }
    }

    if (images.length === 0) {
      console.error("No image data found in Gemini 2.0 Flash response:", data)
      return NextResponse.json({ error: "No valid image data in Gemini 2.0 Flash response" }, { status: 500 })
    }

    console.log(`Successfully generated ${images.length} images with Gemini 2.0 Flash`)

    return NextResponse.json({
      images,
      metadata: {
        prompt,
        generatedText: generatedText.trim(),
        modelVersion: modelId,
        provider: "gemini-2.0-flash",
        isPlaceholder: false,
      },
    })
  } catch (error: any) {
    console.error("Error in Gemini 2.0 Flash generate-images API route:", error)
    const message = error instanceof Error ? error.message : "An unknown error occurred"
    return NextResponse.json({ error: message }, { status: 500 })
  }
} 